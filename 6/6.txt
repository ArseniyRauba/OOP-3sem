1. Как генерируется исключение?
Исключения в C# генерируются с помощью ключевого слова throw. Например:

csharp
Копировать код
throw new Exception("Ошибка произошла!");
Это указывает на то, что программа столкнулась с проблемой, которую невозможно обработать обычным способом. Исключение вызывает немедленный переход к ближайшему обработчику ошибок (catch).

2. Методика обработки исключений
Исключения обрабатываются с помощью блока try-catch-finally:

try: Содержит код, который может вызвать исключение.
catch: Содержит обработку определённого типа исключений.
finally (необязательно): Содержит код, который выполняется в любом случае (например, освобождение ресурсов).
Пример:

csharp
Копировать код
try
{
    int result = 10 / 0; // Ошибка деления на ноль
}
catch (DivideByZeroException ex)
{
    Console.WriteLine($"Ошибка: {ex.Message}");
}
finally
{
    Console.WriteLine("Освобождение ресурсов");
}
3. Ключевое слово для генерации исключений
Ключевое слово throw используется для генерации исключений.

4. Ключевые слова для обработки и генерации исключений
try: Определяет блок, где может возникнуть исключение.
catch: Обрабатывает исключения определённого типа.
throw: Генерирует исключение.
finally: Выполняет код после обработки исключений, независимо от их наличия.
Механизм обработки исключений:

При возникновении исключения выполнение программы переходит из текущего блока try в ближайший подходящий блок catch.
Если ни один блок catch не соответствует типу исключения, программа завершает выполнение с ошибкой.
5. Что будет, если нет подходящего блока catch?
Если программа не содержит блока catch, способного обработать исключение:

Исключение поднимается вверх по стеку вызовов.
Если оно не будет перехвачено, программа завершится с сообщением об ошибке, содержащим стек вызовов.
6. Что такое фильтры исключений?
Фильтры исключений позволяют выполнять обработку на основе условий. Используется с помощью ключевого слова when.

Пример:

csharp
Копировать код
try
{
    throw new Exception("Custom exception");
}
catch (Exception ex) when (ex.Message.Contains("Custom"))
{
    Console.WriteLine("Обработано исключение с фильтром.");
}
7. Могут ли исключения быть вложенными?
Да, исключения могут быть вложенными. Например, внутри блока catch можно снова сгенерировать исключение:

csharp
Копировать код
try
{
    try
    {
        throw new InvalidOperationException("Вложенное исключение");
    }
    catch (InvalidOperationException ex)
    {
        Console.WriteLine("Обработка внутреннего исключения.");
        throw; // Повторная генерация
    }
}
catch (Exception ex)
{
    Console.WriteLine($"Внешний обработчик: {ex.Message}");
}
8. Синтаксис для отлова любого исключения
Для отлова всех исключений используется блок catch без параметров:

csharp
Копировать код
catch
{
    Console.WriteLine("Обработано общее исключение.");
}
9. Руководство при размещении обработчиков исключений
Размещайте более специфические обработчики исключений раньше (например, DivideByZeroException перед Exception).
Общий обработчик (catch (Exception)) размещайте последним.
Не злоупотребляйте перехватом исключений — используйте только в случаях, где это действительно необходимо.
10. Что будет выведено на консоль?
csharp
Копировать код
static void Main(string[] args)
{
    string[] str = new string[5];
    try {
        str[4] = "anything";
        Console.WriteLine("It's OK");
    }
    catch (IndexOutOfRangeException e)
    {
        Console.WriteLine("IndexOutOfRangeException");
    }
    catch (Exception e)
    {
        Console.WriteLine("Exception");
    }
}
Вывод на консоль:

rust
Копировать код
It's OK
Исключений не произойдёт, так как индекс 4 находится в пределах массива из 5 элементов.

11. Как повторно сгенерировать то же исключение?
Повторная генерация исключения осуществляется с помощью throw без указания объекта:

csharp
Копировать код
catch (Exception ex)
{
    Console.WriteLine($"Обработка исключения: {ex.Message}");
    throw; // Проброс того же исключения выше
}
12. Методы в классе Exception
Класс Exception предоставляет:

Message: Описание ошибки.
StackTrace: Стек вызовов, где произошло исключение.
InnerException: Вложенное исключение.
HelpLink: Ссылка на документацию (можно задать вручную).
TargetSite: Метод, вызвавший исключение.
ToString(): Полная информация об исключении.
Пример:

csharp
Копировать код
try
{
    throw new Exception("Пример исключения");
}
catch (Exception ex)
{
    Console.WriteLine($"Ошибка: {ex.Message}");
    Console.WriteLine($"Стек вызовов: {ex.StackTrace}");
}